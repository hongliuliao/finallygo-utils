welcome to yuetu(悦兔) world.

ps:写这个框架的主要原因是被现在ssh框架的启动速度惊呆了,所以写这个框架,希望改变这种情况.
在写这个框架的时候我就尽量考虑到了灵活性和易用性,要封装,但是也要提供灵活的修改,所以我这个框架有三个部分,你可以三个都用,也可以选择一个用,这都是没有影响的.(但是finallytools.jar是公用工具包是一定要导入的)
环境要求:jdk 1.4以上版本,需要的jar包请参考,RelateJar.txt文件里的描述

首先介绍下整个框架包含的内容 
为了方便讲解我把我框架的内容分别对应到ssh上,

首先说说hibernate,我的orm部分和hibernate不一样的地方是hibernate是根据配置文件来实现映射的,而我的orm框架是通过
规则来实现映射的,我这么做有两个原因,一个是我觉的一般来说公司都有自己的一些规范,其次这么做可以省去写配置文件的过程,现在默认的规则是:
将数据库中字段的下划线去掉,再将首字母大写,不过pojo字段的首字母是不会大写的,比如表名叫my_user,字段有user_name,而转成对象就是MyUser,属性为userName如果你要修改映射规则,请实现IOrmRule接口,并修改orm.properties中配置文件的信息.

下面介绍下我这个orm框架的原理,

我是先通过自己写的工具包collect-database-info.jar(后整合至yuetu-orm.jar中)来实现数据库信息的收集,之后转换为我定义的对象MyTable,是否能收集到有用的信息的依据是数据库是否有良好的设计,如果设计的好,则java这边处理起来也方便一些.
比较有用的信息是每个表的字段信息和主键的信息,以及外键的信息.通过这些信息就可以生成一张表的增删改查的基本操作,同时在设置一些对象的一对多,多对多的关系的时候也很重要
在这里简单介绍一下三个简单的封装类
(1)MySession
(2)JdbcTemplate
(3)SimpleQuery
前两个熟悉hibernate和spring的人一定一看就明白了,一个是模仿hibernate的session,一个是模仿spring中的jdbctemplate的实现,不过我的session是不支持HQL的^^,但是基本的增删改查的功能还是提供了,而jdbctemplate就像spring里的一样是用来执行一些基本的SQL语句.
第三个是帮助大家来查询用的,对单表的查询,用它就没错了.

接下来我介绍下spring部分吧,我这里只实现了aop的功能,因为ioc我觉得只有在系统比较复杂而且比较灵活多变的时候用到,
而我这个框架的主要针对的是中小型项目的开发.
aop这块实现的功能主要是事务控制,
使用的时候有两个注意点,一个是得到jdbctemplate的时候需要得到不自动提交的jdbctemplate(jdbctemplateUtils的
getJdbcTemplateNotAutoCommit方法可以得到),而且在调用servcie方法的时候请通过TransactionProxy.createProxy
方法来获得service对象,这样就可以对service的方法进行自动的事务控制了;
事务管理这块主要使用的技术是ThreadLocal,再配合cglib实现的,这部分功能还没有完善,不推荐使用

最后说说struts部分的实现吧,这个部分我参考了struts2的设计思想以及dwr的思想,
使用前必须现在web.xml里配置如下内容
  <filter>
    <filter-name>finaFilter</filter-name>
  	<filter-class>com.finallygo.countmoney.servlet.MyFilter</filter-class>
    </filter>
  <filter-mapping>
  	<filter-name>finaFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
为什么这么配置我后面会说,先说说我的设计模式,我采用的设计模式也是MVC的,V的部分当然是jsp,而C的部分当然不能是servlet^^,考虑到灵活性,我参考了struts的设计,所以我的C部分也是Acton,但是使用我的mvc框架必须满足以下两个条件,

(1)将你的Action所在的包加入action.properties中
(2)在你的action中定义request和response两个变量,并生成相应的set方法或者继承com.finallygo.yuetu.mvc.control.MyAction.

之后的用法和在servlet一样,但是你可以自定义方法的名字,不需要再覆写doPost,doGet方法了,在调用的时候是参考dwr的实现的,就是"Action名.方法名"就可以了(action需要在action.properties定义),如果用get方式的话,可以直接在后+参数的,效果是一样的.
这里要推荐一个方法:
CommonUtils中的map2ObjectForRequest,这样可以将中页面传过来的参数自动封装成指定的对象

接下来说说实现的原理,
主要是通过拦截器分析从客户端传过来的URL,之后解析,解析之后就去和action.properties进行匹配,如果找到了就执行相应的方法,具体可以查看MyFilter.java这个类,其实mvc这部分实现的最简单了,核心就是这个类,而那个MyAction中,其实也就是定义了request和response两个类,以及它们的get,set方法
